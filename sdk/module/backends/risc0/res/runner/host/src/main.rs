// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use args::parse_args;
use methods::{
    PROGRAM_ELF, PROGRAM_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};
// use risc0_zkvm::serde::{from_slice, to_vec};
fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // For example:
    //let input: u32 = 15 * u32::pow(2, 27) + 1;
    let mut input_data: u32 = 0;
    let args = parse_args().unwrap();
    for arg in args {
        match arg.kind.as_str() {
            "uint32" => {
                input_data = u32::from_str_radix(&arg.value, 10).unwrap();
                // input_data.extend(&to_vec(&value).unwrap());
            }
            // "bytearray" => {
            //     let bytes = hex::decode(&arg.value).unwrap();
            //     input_data.extend(&to_vec(&bytes).unwrap());
            // }
            _ => {
                eprintln!("Unknown argument kind: {}", arg.kind);
            }
        }
    }

    let env = ExecutorEnv::builder()
        .write(&input_data)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, PROGRAM_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    let output: u32 = receipt.journal.decode().unwrap();
    println!("{} is a public output from the journal ", output);

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    //let _output: u32 = receipt.journal.decode().unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(PROGRAM_ID)
        .unwrap();
}
