// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use args::parse_args;
use methods::{
    PROGRAM_ELF, PROGRAM_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use hex;

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let mut ex_env = ExecutorEnv::builder();

    let args = parse_args().unwrap();
    for arg in args {
        match arg.kind.as_str() {
            "uint32" => {
                ex_env.write(&u32::from_str_radix(&arg.value, 10).unwrap()).unwrap();
            }
            "bytearray" => {
                let value = if arg.value.starts_with("0x") {
                    &arg.value[2..]
                } else {
                    &arg.value
                };
                let bytes = match hex::decode(value) {
                    Ok(b) => {b},
                    Err(e) => {
                        eprintln!("Failed to decode hex string: {}", e);
                        return;
                    }
                };
                ex_env.write(&bytes).unwrap();
            }
            "file" => {
                let buffer = std::fs::read("/risc0_target/input.file").unwrap();
                let buf_slice = buffer.as_slice();
                ex_env.write(&buf_slice).unwrap();
            }
            _ => {
                eprintln!("Unknown argument kind: {}", arg.kind);
            }
        }
    }

    let env = ex_env.build().unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    println!("Proving ...");
    let prove_info = prover
        .prove(env, PROGRAM_ELF)
        .unwrap();

    println!("Receipt: {:?}", prove_info.receipt);
    // extract the receipt.
    let receipt = prove_info.receipt;

    // Save receipt to file
    // let receipt_file = File::create("/tmp/proofs/risc0Proof.bin").expect("Creating receipt file failed");
    // bincode::serialize_into(receipt_file, &receipt).expect("Serializing receipt failed");

    let output = receipt.journal.clone();
    println!("Output: {:?}", output);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(PROGRAM_ID)
        .unwrap();
}
